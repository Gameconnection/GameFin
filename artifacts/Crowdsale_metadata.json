{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "rate",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "wallet",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "purchaser",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensPurchased",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "buyTokens",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wallet",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "weiRaised",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Crowdsale is a base contract for managing a token crowdsale, allowing investors to purchase tokens with ether. This contract implements such functionality in its most fundamental form and can be extended to provide additional functionality and/or custom behavior. The external interface represents the basic interface for purchasing tokens, and conforms the base architecture for crowdsales. It is *not* intended to be modified / overridden. The internal interface conforms the extensible and modifiable surface of crowdsales. Override the methods to add functionality. Consider using 'super' where appropriate to concatenate behavior.",
			"events": {
				"TokensPurchased(address,address,uint256,uint256)": {
					"params": {
						"amount": "amount of tokens purchased",
						"beneficiary": "who got the tokens",
						"purchaser": "who paid for the tokens",
						"value": "weis paid for purchase"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"buyTokens(address)": {
					"details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
					"params": {
						"beneficiary": "Recipient of the token purchase"
					}
				},
				"constructor": {
					"details": "The rate is the conversion between wei and the smallest and indivisible token unit. So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.",
					"params": {
						"rate": "Number of token units a buyer gets per wei",
						"token": "Address of the token being sold",
						"wallet": "Address where collected funds will be forwarded to"
					}
				},
				"rate()": {
					"returns": {
						"_0": "the number of token units a buyer gets per wei."
					}
				},
				"token()": {
					"returns": {
						"_0": "the token being sold."
					}
				},
				"wallet()": {
					"returns": {
						"_0": "the address where funds are collected."
					}
				},
				"weiRaised()": {
					"returns": {
						"_0": "the amount of wei raised."
					}
				}
			},
			"title": "Crowdsale",
			"version": 1
		},
		"userdoc": {
			"events": {
				"TokensPurchased(address,address,uint256,uint256)": {
					"notice": "Event for token purchase logging"
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Crowdsale.sol": "Crowdsale"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Crowdsale.sol": {
			"keccak256": "0x5ed360d79d6e60cf6aafd370d8e9f1ffc85dd2cc2181471a1f943b9e21c904c1",
			"urls": [
				"bzz-raw://31b8301d5816ccee98f58d5a3f4370b228689b859d6fee01650286860d59adc3",
				"dweb:/ipfs/QmbDxwyz2WEGB2cjHR9whWys1ck5nrxFvsZiW6N8vTHFYe"
			]
		},
		"GSN/Context.sol": {
			"keccak256": "0xf2005a80152bc6c062354784e1c8a522f0286217dee71ff2f9b150ba0f9640b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://07d8de348b1c67fba0d55f392da8cc7505f51b957557331f5dafc7b61e9db0a6",
				"dweb:/ipfs/QmaDRFkwof22wQcp9oJvhb3TH4aze4U9GG5TzXLz3SEzGm"
			]
		},
		"math/SafeMath.sol": {
			"keccak256": "0xc0816ca0a49384b881fa0c3b9b59bafff82b7587a679e6d601021eba150b458a",
			"license": "MIT",
			"urls": [
				"bzz-raw://42539cd90d8b7f868de6a96ac6c60fa38b20739ca4b386aa1a8703eb288b87de",
				"dweb:/ipfs/Qmf3pizfd7qPGhDV34id9dSMnm7DQZGh7ZAxfWSy5vZmi1"
			]
		},
		"token/ERC20/IERC20.sol": {
			"keccak256": "0x14ec24d0f20792b9c442bd6129d231f649ac9b5618b0aed97142bc13a023b706",
			"license": "MIT",
			"urls": [
				"bzz-raw://53829bfef5cf938285f797297cc26a10e9d41f03d20a5ff39aebc74b51dc691b",
				"dweb:/ipfs/QmQHRLWB4joKW7G6mwRV1cPxUPx7cVb3CqkC1n6v32Y4NE"
			]
		},
		"token/ERC20/SafeERC20.sol": {
			"keccak256": "0x55fd88b7c643743e96f37eeffa27778f5bb0361daad91ad8d72b38b7e16a39bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://c421e05a14c34262183b997d453664285b1b85a9138c53d9015fec663a7a47b2",
				"dweb:/ipfs/QmcV446B3kFvoiG5hgGeby1AHcYvhsa2x5MWvCznUDcpry"
			]
		},
		"utils/Address.sol": {
			"keccak256": "0x32101c7e63759b30196103580a4083df6859e60e3fc79140957ca6c439749b63",
			"license": "MIT",
			"urls": [
				"bzz-raw://d45a83b9b12b7e95942b808c0009dcdce8f8fdf201c8952e05a90308c33f2671",
				"dweb:/ipfs/QmTY4bpKVYCHxqXCVYS6oESPC7KxaUgtBqCopyZNd4zRPa"
			]
		},
		"utils/Context1.sol": {
			"keccak256": "0xa475c1685349498b21fd15bf23d66cc09480745186a5854b010784b620ffe4f3",
			"license": "MIT",
			"urls": [
				"bzz-raw://7aa171a3b0aeabd7b31b94cf63eb14df9fd3d2e3a12d5ba3d9a634a789871196",
				"dweb:/ipfs/QmNwZDsCn4Af9Uyw3syohXAAoe9pAwCuvCm6FZXG3Hv5ka"
			]
		},
		"utils/ReentrancyGuard.sol": {
			"keccak256": "0x4e895b5231a6f07693f0f1744072d864b42341cc6604b42b451501874972a084",
			"license": "MIT",
			"urls": [
				"bzz-raw://0792dd55db747e52e7cdcc7b6733c244500bca01e180ec8c688c8bf5f47e0006",
				"dweb:/ipfs/QmbXiVuY9ae3kBMkKPS1NxTsTCKRU5yEU7pFxRsGXqbgWz"
			]
		}
	},
	"version": 1
}